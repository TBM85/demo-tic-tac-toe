{"version":3,"sources":["components/UI/BlockText/BlockText.js","components/UI/Text/Text.js","components/Results/Results.js","components/Square/Square.js","components/Board/Board.js","components/UI/Button/Button.js","components/Game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["BlockText","props","className","children","Text","Results","equisArray","length","zeroArray","Square","onClick","value","Board","state","squares","Array","fill","isNext","handleClick","i","slice","calculateWinner","setState","winner","onPassDataToGame","renderSquare","lines","a","b","c","this","status","Component","Button","type","clicked","Game","gameStarted","isWinner","isDraw","finalWinner","handlerWinner","reduce","obj","square","push","handlerStartGameBtn","handlerPlayAgainBtn","handlerRestartGameBtn","numberOfPieces","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAUeA,EARG,SAACC,GACjB,OACE,qBAAKC,UAAU,aAAf,SACGD,EAAME,YCGEC,EANF,SAACH,GACZ,OACE,4BAAIA,EAAME,Y,OCaCE,EAfC,SAACJ,GACf,OACE,sBAAKC,UAAS,kBAAaD,EAAMC,WAAjC,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAMA,UAAU,aAAhB,kBACCD,EAAMK,WAAWC,UAEpB,sBAAKL,UAAU,SAAf,UACE,sBAAMA,UAAU,aAAhB,kBACCD,EAAMO,UAAUD,cCDVE,EARA,SAACR,GACd,OACE,wBAAQC,UAAU,SAASQ,QAAS,kBAAMT,EAAMS,WAAhD,SACE,sBAAMR,UAAU,aAAhB,SAA8BD,EAAMU,WCArBC,E,4MACnBC,MAAQ,CACNC,QAASC,MAAM,GAAGC,KAAK,MACvBC,QAAQ,G,EAIVC,YAAc,SAACC,GACb,IAAML,EAAU,EAAKD,MAAMC,QAAQM,QAGnC,IAAI,EAAKC,gBAAgBP,KAAYA,EAAQK,GAA7C,CAGAL,EAAQK,GAAK,EAAKN,MAAMI,OAAS,IAAM,IACvC,EAAKK,SAAS,CAAER,QAASA,EAASG,QAAS,EAAKJ,MAAMI,SAGtD,IAAMM,EAAS,EAAKF,gBAAgBP,GAEpC,EAAKb,MAAMuB,iBAAiBD,EAAQT,K,EAItCW,aAAe,SAACN,GACd,OACE,cAAC,EAAD,CACER,MAAO,EAAKE,MAAMC,QAAQK,GAC1BT,QAAS,kBAAM,EAAKQ,YAAYC,O,EAMtCE,gBAAkB,SAACP,GAYjB,IAXA,IAAMY,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAP,EAAI,EAAGA,EAAIO,EAAMnB,OAAQY,IAAK,CAAC,IAAD,cACnBO,EAAMP,GADa,GAC9BQ,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GACEf,EAAQa,IACRb,EAAQa,KAAOb,EAAQc,IACvBd,EAAQa,KAAOb,EAAQe,GAEvB,OAAOf,EAAQa,GAGnB,OAAO,M,4CAGT,WAAU,IAAD,EAC2BG,KAAK7B,MAA/BK,EADD,EACCA,WAAYE,EADb,EACaA,UACduB,EAASD,KAAKjB,MAAMI,OAAS,IAAM,IAEzC,OACE,sBAAKf,UAAU,kBAAf,UACE,cAAC,EAAD,CACEA,UAAU,gBACVI,WAAYA,EACZE,UAAWA,IAEb,sBAAKN,UAAU,YAAf,UACG4B,KAAKL,aAAa,GAClBK,KAAKL,aAAa,GAClBK,KAAKL,aAAa,MAErB,sBAAKvB,UAAU,YAAf,UACG4B,KAAKL,aAAa,GAClBK,KAAKL,aAAa,GAClBK,KAAKL,aAAa,MAErB,sBAAKvB,UAAU,YAAf,UACG4B,KAAKL,aAAa,GAClBK,KAAKL,aAAa,GAClBK,KAAKL,aAAa,MAErB,sBAAKvB,UAAU,eAAf,kBACO,+BAAO6B,IADd,4B,GArF2BC,aCGpBC,EANA,SAAChC,GACd,OACE,wBAAQC,UAAS,cAASD,EAAMC,WAAagC,KAAK,SAASxB,QAAST,EAAMkC,QAA1E,SAAoFlC,EAAME,YCKzEiC,E,4MACnBvB,MAAQ,CACNwB,aAAa,EACbC,SAAU,GACVC,QAAQ,EACRjC,WAAY,GACZE,UAAW,GACXgC,YAAa,I,EAIfC,cAAgB,SAAClB,EAAQT,GACvB,EAAKQ,SAAS,CAAEgB,SAAUf,IAYR,IATLT,EAAQ4B,QAAO,SAACC,EAAKC,GAKhC,OAJKD,EAAIC,KACPD,EAAIC,GAAU,GAEhBD,EAAIC,KACGD,IACN,IAGK,GAAgBpB,GACtB,EAAKD,SAAS,CAAEiB,QAAQ,IAdS,MAiBD,EAAK1B,MAA/BP,EAjB2B,EAiB3BA,WAAYE,EAjBe,EAiBfA,UAEL,MAAXe,EACFjB,EAAWuC,KAAK,KACI,MAAXtB,GACTf,EAAUqC,KAAK,KAIS,IAAtBvC,EAAWC,OACb,EAAKe,SAAS,CAAEkB,YAAa,MACC,IAArBhC,EAAUD,QACnB,EAAKe,SAAS,CAAEkB,YAAa,O,EAKjCM,oBAAsB,WACpB,EAAKxB,SAAS,CAAEe,aAAa,K,EAI/BU,oBAAsB,WACpB,EAAKzB,SAAS,CAAEe,aAAa,IAC7B,EAAKf,SAAS,CAAEgB,SAAU,KAC1B,EAAKhB,SAAS,CAAEiB,QAAQ,K,EAG1BS,sBAAwB,WACtB,EAAK1B,SAAS,CAAEe,aAAa,IAC7B,EAAKf,SAAS,CAAEgB,SAAU,KAC1B,EAAKhB,SAAS,CAAEhB,WAAY,KAC5B,EAAKgB,SAAS,CAAEd,UAAW,KAC3B,EAAKc,SAAS,CAAEkB,YAAa,M,4CAG/B,WAAU,IAAD,EAC0DV,KAAKjB,MAA9DwB,EADD,EACCA,YAAaC,EADd,EACcA,SAAUC,EADxB,EACwBA,OAAQjC,EADhC,EACgCA,WAAYE,EAD5C,EAC4CA,UAE7CgC,EAAgBV,KAAKjB,MAArB2B,YAEN,OACE,sBAAKtC,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACGmC,EACEG,EAwCC,sBAAKtC,UAAU,cAAf,UACE,cAAC,IAAD,CAAU+C,eAAe,SACzB,sBAAM/C,UAAU,gBAAhB,SAAiCsC,IACjC,sBAAMtC,UAAU,cAAhB,sBACA,cAAC,EAAD,CACEA,UAAU,YACViC,QAASL,KAAKkB,sBAFhB,6BA3CDV,GAAaC,GAMTD,GAAYC,EACf,eAAC,EAAD,WACE,eAAC,EAAD,WACE,sBAAMrC,UAAU,aAAhB,iBADF,WAIA,cAAC,EAAD,CACEA,UAAU,WACViC,QAASL,KAAKiB,oBAFhB,2BAQF,eAAC,EAAD,WACE,eAAC,EAAD,WACE,sBAAM7C,UAAU,aAAhB,SAA8BoC,IADhC,aAIA,cAAC,EAAD,CACEpC,UAAU,eACVI,WAAYA,EACZE,UAAWA,IAEb,cAAC,EAAD,CACEN,UAAU,WACViC,QAASL,KAAKiB,oBAFhB,2BA7BF,cAAC,EAAD,CACEvB,iBAAkBM,KAAKW,cACvBnC,WAAYA,EACZE,UAAWA,IAgDjB,eAAC,EAAD,WACE,cAAC,EAAD,0DACA,cAAC,EAAD,kHAIA,cAAC,EAAD,iEACA,cAAC,EAAD,CAAQN,UAAU,WAAWiC,QAASL,KAAKgB,oBAA3C,6BAMN,qBAAK5C,UAAU,qB,GA3IW8B,aCQnBkB,MAdf,WACE,OACE,sBAAKhD,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,+CAEF,cAAC,EAAD,IACA,iCACE,sDAAqB,6CAAwB,uBAA7C,gCCCOiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b871edbd.chunk.js","sourcesContent":["import React from 'react';\n\nconst BlockText = (props) => {\n  return (\n    <div className=\"game-block\">\n      {props.children}\n    </div>\n  );\n};\n\nexport default BlockText;","import React from 'react';\n\nconst Text = (props) => {\n  return (\n    <p>{props.children}</p>\n  );\n};\n\nexport default Text;","import React from \"react\";\n\nconst Results = (props) => {\n  return (\n    <div className={`results ${props.className}`}>\n      <div className=\"result\">\n        <span className=\"game-token\">X : </span>\n        {props.equisArray.length}\n      </div>\n      <div className=\"result\">\n        <span className=\"game-token\">O : </span>\n        {props.zeroArray.length}\n      </div>\n    </div>\n  );\n};\n\nexport default Results;\n","import React from \"react\";\n\nconst Square = (props) => {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      <span className=\"game-token\">{props.value}</span>\n    </button>\n  );\n};\n\nexport default Square;\n","import React, { Component } from \"react\";\nimport Results from \"../Results/Results\";\n\nimport Square from \"../Square/Square\";\n\nexport default class Board extends Component {\n  state = {\n    squares: Array(9).fill(null),\n    isNext: true\n  };\n\n  // Handles what happens when a square is clicked\n  handleClick = (i) => {\n    const squares = this.state.squares.slice();\n\n    // Ignore a click if someone has won the game or if a square is already filled\n    if (this.calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.isNext ? \"X\" : \"O\";\n    this.setState({ squares: squares, isNext: !this.state.isNext });\n\n    // Sends data to the \"Game\" component\n    const winner = this.calculateWinner(squares);\n\n    this.props.onPassDataToGame(winner, squares);\n  };\n\n  // Reproduce a square\n  renderSquare = (i) => {\n    return (\n      <Square\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  };\n\n  // Calculate who is the winning player\n  calculateWinner = (squares) => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return squares[a];\n      }\n    }\n    return null;\n  };\n\n  render() {\n    const { equisArray, zeroArray } = this.props;\n    const status = this.state.isNext ? \"X\" : \"O\";\n\n    return (\n      <div className=\"board-container\">\n        <Results\n          className=\"board-results\"\n          equisArray={equisArray}\n          zeroArray={zeroArray}\n        />\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        <div className=\"board-status\">\n          It's <span>{status}</span>'s turn to play\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nconst Button = (props) => {\n  return (\n    <button className={`btn ${props.className}`} type=\"button\" onClick={props.clicked}>{props.children}</button>\n  );\n};\n\nexport default Button;","import React, { Component } from \"react\";\nimport Confetti from \"react-confetti\";\n\nimport BlockText from \"../UI/BlockText/BlockText\";\nimport Text from \"../UI/Text/Text\";\nimport Board from \"../Board/Board\";\nimport Button from \"../UI/Button/Button\";\nimport Results from \"../Results/Results\";\n\nexport default class Game extends Component {\n  state = {\n    gameStarted: false,\n    isWinner: \"\",\n    isDraw: false,\n    equisArray: [],\n    zeroArray: [],\n    finalWinner: \"\",\n  };\n\n  // Gets the data of the \"Board\" component and uses it\n  handlerWinner = (winner, squares) => {\n    this.setState({ isWinner: winner });\n\n    // Define all existing \"X\", \"0\" and null tokens\n    const draw = squares.reduce((obj, square) => {\n      if (!obj[square]) {\n        obj[square] = 0;\n      }\n      obj[square]++;\n      return obj;\n    }, {});\n\n    // Determines when there is a draw in the game\n    if (draw[\"X\"] === 5 && !winner) {\n      this.setState({ isDraw: true });\n    }\n\n    const { equisArray, zeroArray } = this.state;\n\n    if (winner === \"X\") {\n      equisArray.push(\"X\");\n    } else if (winner === \"O\") {\n      zeroArray.push(\"O\");\n    }\n\n    // Determine the final winner of the game\n    if (equisArray.length === 5) {\n      this.setState({ finalWinner: \"X\" });\n    } else if (zeroArray.length === 5) {\n      this.setState({ finalWinner: \"O\" });\n    }\n  };\n\n  // Makes the game start for the first time\n  handlerStartGameBtn = () => {\n    this.setState({ gameStarted: true });\n  };\n\n  // Causes the game to restart\n  handlerPlayAgainBtn = () => {\n    this.setState({ gameStarted: true });\n    this.setState({ isWinner: \"\" });\n    this.setState({ isDraw: false });\n  };\n\n  handlerRestartGameBtn = () => {\n    this.setState({ gameStarted: true });\n    this.setState({ isWinner: \"\" });\n    this.setState({ equisArray: [] });\n    this.setState({ zeroArray: [] });\n    this.setState({ finalWinner: \"\" });\n  };\n\n  render() {\n    const { gameStarted, isWinner, isDraw, equisArray, zeroArray } = this.state;\n\n    let { finalWinner } = this.state;\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          {gameStarted ? (\n            !finalWinner ? (\n              !isWinner && !isDraw ? (\n                <Board\n                  onPassDataToGame={this.handlerWinner}\n                  equisArray={equisArray}\n                  zeroArray={zeroArray}\n                />\n              ) : !isWinner && isDraw ? (\n                <BlockText>\n                  <Text>\n                    <span className=\"game-token\">X O</span>\n                    Draw!\n                  </Text>\n                  <Button\n                    className=\"btn-dark\"\n                    clicked={this.handlerPlayAgainBtn}\n                  >\n                    Play Again\n                  </Button>\n                </BlockText>\n              ) : (\n                <BlockText>\n                  <Text>\n                    <span className=\"game-token\">{isWinner}</span>\n                    Winner!\n                  </Text>\n                  <Results\n                    className=\"game-results\"\n                    equisArray={equisArray}\n                    zeroArray={zeroArray}\n                  />\n                  <Button\n                    className=\"btn-dark\"\n                    clicked={this.handlerPlayAgainBtn}\n                  >\n                    Play Again\n                  </Button>\n                </BlockText>\n              )\n            ) : (\n              <div className=\"game-winner\">\n                <Confetti numberOfPieces=\"1000\" />\n                <span className=\"winner-player\">{finalWinner}</span>\n                <span className=\"winner-text\">Winner !</span>\n                <Button\n                  className=\"btn-light\"\n                  clicked={this.handlerRestartGameBtn}\n                >\n                  Restart Game\n                </Button>\n              </div>\n            )\n          ) : (\n            <BlockText>\n              <Text>The game requires two players: \"X\" and \"O\".</Text>\n              <Text>\n                The player who places three of his pieces in a horizontal,\n                vertical or diagonal row; win the round.\n              </Text>\n              <Text>The player who first wins 5 rounds, wins the game.</Text>\n              <Button className=\"btn-dark\" clicked={this.handlerStartGameBtn}>\n                Start Game\n              </Button>\n            </BlockText>\n          )}\n        </div>\n        <div className=\"game-info\"></div>\n      </div>\n    );\n  }\n}\n","import './App.css';\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tic Tac Toe</h1>\n      </header>\n      <Game />\n      <footer>          \n        <p>© Copyright 2021. <strong>\"TBM85\"</strong><br /> All rights reserved</p> \n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}